/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* vim: set sw=4 ts=8 et tw=80 ft=cpp : */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include PBackgroundSharedTypes;

namespace mozilla {
namespace dom {

struct ServiceWorkerInstanceConfig
{
  // Process-tree wide unique identifier for this worker instance.  Exists to
  // distinguish between multiple instances that are otherwise equivalent from a
  // ServiceWorkerRegistrationData perspective.  In the future, this may have
  // functional importance if we adopt multiple instances for parallelism. For
  // now this is just helpful for debugging/logging.
  uint64_t instanceID;

  // ServiceWorkerRegistrationData/ServiceWorkerInfo data that actually
  // characterizes what we load.
  nsCString scope;
  nsCString currentWorkerURL;
  nsString cacheName;
  PrincipalInfo principal;
};

/**
 * Parent-to-child instruction to promptly terminate the worker.  The child
 * doesn't need to know why so there's no payload.
 */
struct SWInstanceParentTriggeredTermination
{
};

 /**
  * Child-to-parent: the instance terminated on its own accord for normal
  * reasons, like the SW calling close() on itself.
  */
 struct SWInstanceExpectedTermination
 {
 };

/**
 * Child-to-parent: something unusual happened like a failure to initialize.
 * NS_WARNING-worthy.
 */
struct SWInstanceUnexpectedTermination
{
  nsresult rv;
};

/**
 * PServiceWorkerInstance __delete__ bidirectional payload.
 */
union SWInstanceTerminationReason
{
  SWInstanceParentTriggeredTermination;
  SWInstanceExpectedTermination;
  SWInstanceUnexpectedTermination;
};

} // namespace dom
} // namespace mozilla
