/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* vim: set sw=4 ts=8 et tw=80 ft=cpp : */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include PBackgroundSharedTypes;
include DOMTypes;
include FetchTypes;

namespace mozilla {
namespace dom {

/**
 * Evaluate the ServiceWorker script for caching side-effects while verifying
 * that the JS top level evaluates.  AKA the step prior to dispatching an
 * "install" LifeCycle event.  Corresponds to step 5.7.4 of the update
 * algorithm.
 *
 * Regarding caching side-effects, the ServiceWorkerScriptCache mechanism used
 * by the update/register job types only operates on the (root/entrypoint)
 * ServiceWorker script.  The DOM CacheStorage will contain only the new single
 * script file.  (In non-module mode) It is up to the ScriptLoaderRunnable to
 * first check the cache for each importScripts request and failover to the
 * network if it's not found, simultaneously saving the result as it is
 * evaluated.  The net result is that as long as the imports all occur
 * unconditionally at the top-level, the ServiceWorker and its dependencies will
 * be fully offlined when this event completes.  And future events can largely
 * expect that their events will not experience transport failures or top level
 * evaluation failures.
 *
 * Otherwise, this is conceptually the definitive minimal event; every other
 * event also triggers evaluation of the script (if it's not already evaluated)
 * before dispatching an actual event.
 */
struct ServiceWorkerEvaluateScriptEventArgs {
};

/**
 * Covers "install" and "activate" events.
 *
 * Note: LifeCycle versus Lifecycle.  This is done quasi-consistently throughout
 * the codebase.
 */
struct ServiceWorkerLifeCycleEventArgs {
  // "install" or "activate"
  nsString eventName;
};

/**
 * Intercepted fetch event.
 */
struct ServiceWorkerFetchEventArgs {
  IPCInternalRequest request;
};

/**
 * ServiceWorker.postMessage event.
 */
struct ServiceWorkerPostMessageEventArgs {
  ClonedMessageData messageData;
};

// It's semantically significant whether there is push data or not.  This can
// be replaced with an OptionalUint8Array or the like if one comes into
// existence.
union MaybePushData {
  uint8_t[];
  void_t;
}

struct ServiceWorkerPushEventArgs {
  // For Web Push messages this is the opaque identifier the server generated
  // for the message that is used to derive the URI reported to the pusher so
  // they can check on delivery status.  (The Mozilla autopush server id is
  // an encrypted structured string at the time of this writing.)  This is used
  // to report delivery errors to the push service.  It is sent to the content
  // process exclusively for ease of debugging and error reporting; the parent
  // needs to have it around to report failure if the content process dies so
  // the value is not sent back in the result.
  //
  // For Simple Push (dead) this was the version.
  nsString messageId;
  MaybePushData data;
};

struct ServiceWorkerPushSubscriptionChangeEventArgs {
};

struct ServiceWorkerNotificationEventArgs {
  //
  nsString eventName;
  nsString id;
  nsString title;
  nsString dir;
  nsString lang;
  nsString body;
  nsString tag;
  nsString icon;
  nsString data;
  nsString behavior;
  nsString scope;
};

union ServiceWorkerEventArgs {
  ServiceWorkerEvaluateScriptEventArgs;
  ServiceWorkerLifeCycleEventArgs;
  ServiceWorkerFetchEventArgs;
  ServiceWorkerPostMessageEventArgs;
  ServiceWorkerPushEventArgs;
  ServiceWorkerPushSubscriptionChangeEventArgs;
  ServiceWorkerNotificationEventArgs;
};

struct ServiceWorkerEvaluateScriptEventResult {
  bool result;
};

struct ServiceWorkerLifeCycleEventResult {
  bool result;
};

/**
 * Any fetch Response comes via FetchEventRespondWith method invocation on the
 * PServiceWorkerInstance.  This result corresponds to when the waitUntil
 * fully settles, which is strictly after the fetch response.
 */
struct ServiceWorkerFetchEventResult {
};

/**
 * This corresponds to the waitUntil fully settling.  Any messages sent in
 * response to the sender of this message would occur via the
 * `Client.postMessage` API surface.
 */
struct ServiceWorkerPostMessageEventResult {
};

struct ServiceWorkerPushEventResult {
};

struct ServiceWorkerPushSubscriptionChangeEventResult {
};

struct ServiceWorkerNotificationEventResult {
};

union ServiceWorkerEventResult {
  ServiceWorkerEvaluateScriptEventResult;
  ServiceWorkerLifeCycleEventResult;
  ServiceWorkerFetchEventResult;
  ServiceWorkerPostMessageEventResult;
  ServiceWorkerPushEventResult;
  ServiceWorkerPushSubscriptionChangeEventResult;
  ServiceWorkerNotificationEventResult;
};

} // namespace dom
} // namespace mozilla
